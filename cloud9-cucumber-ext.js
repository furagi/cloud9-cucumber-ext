// Generated by CoffeeScript 1.6.3
define(function(require, exports, module) {
    var commands, completer, editors, ext, ide;
    ext = require("core/ext");
    ide = require("core/ide");
    commands = require("ext/commands/commands");
    editors = require("ext/editors/editors");
    completer = require('ext/language/complete');
    return module.exports = ext.register("ext/cucumber/cucumber", {
        name: "Cucumber",
        alone: true,
        deps: [],
        type: ext.GENERAL,
        nodes: [],
        hook: function() {
            var _this = this;
            ide.addEventListener("socketMessage", this.onMessage.bind(this));
            return commands.addCommand({
                name: "autocomplete",
                bindKey: {
                    mac: "Command-Shift-Space",
                    win: "Ctrl-Shift-Space"
                },
                hint: "autocomplete current line",
                exec: function() {
                    return _this.autocomplete();
                }
            });
        },
        autocomplete: function() {
            var data, line, type;
            line = this.getCurrentLine();
            if (!line) {
                return;
            }
            type = void 0;
            if (/(Given|When|Then|And).+/.test(line)) {
                type = 'step';
            } else {
                if (/@(\w|\W).+/.test(line)) {
                    type = 'tag';
                } else {
                    return;
                }
            }
            data = {
                command: 'cucumber-autocomplete',
                line: line,
                type: type
            };
            return ide.send(data);
        },
        getCurrentLine: function(leftWhitespace) {
            var editor, line, pos;
            editor = editors.currentEditor.amlEditor.$editor;
            pos = editor.getCursorPosition();
            line = editor.getSession().getLine(pos.row);
            if ((leftWhitespace == null) || !leftWhitespace) {
                line = line.replace(/(^\s+)/, '');
            }
            return line;
        },
        onMessage: function(e) {
            var editor, line, match, matches, message, pos, results, undigitedLine, undigitedRealLine, _i, _len;
            message = e.message;
            if (message.type !== 'result' || message.subtype !== 'cucumber-autocomplete') {
                return;
            }
            if (message.body == null) {
                return;
            }
            line = this.getCurrentLine();
            if (!line) {
                return;
            }
            if (line.indexOf(message.body.line) === -1) {
                return;
            }
            matches = message.body.matches;
            if (!matches.length) {
                return;
            }
            results = [];
            undigitedLine = line.replace(/\b[0-9]{1,}\b/, '$d');
            undigitedRealLine = this.getCurrentLine(true).replace(/\b[0-9]{1,}\b/, '$d');
            for (_i = 0, _len = matches.length; _i < _len; _i++) {
                match = matches[_i];
                if (match.indexOf(undigitedLine !== -1)) {
                    match = match.substring(undigitedLine.length);
                    results.push({
                        name: this.getCurrentLine(true) + match,
                        replaceText: this.getCurrentLine(true) + match,
                        identifierRegex: /./
                    });
                }
            }
            console.log(matches);
            editor = editors.currentEditor.amlEditor.$editor;
            pos = editor.getCursorPosition();
            return completer.showCompletionBox(results, line, pos.row, pos.column);
        }
    });
});
